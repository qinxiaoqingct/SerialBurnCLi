# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ master, feature/deploy-test ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
jobs:
  build:
    name: Build Source Lint Static and Pack Dist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --ignore F821 --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Pack As Artifact
      run: |
        if [ -f build.sh ]; then ./build.sh;fi
    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: app
        path: dist/
    - name: Zip As MetaData
      run: |
        zip -r dist.zip dist
  deploy:
    name: Publish Release And Upload Release Asset
    needs: build
    runs-on: ubuntu-latest
    #if: contains(github.ref, 'tags/')
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download build result for app
        # 只有上一步获取到tag_name才继续，下载前面apk任务里面的WhuHelper-debug.zip文件
        # 自动解压缩到当前文件夹，自动删除原压缩文件
        # 多任务之间的数据交换
        #if: steps.prepare_release.outputs.tag_name
        uses: actions/download-artifact@v2
        with:
          name: app
          path: app.zip
      - name: Check Meta Data
        run: |
          ls 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: app.zip
          asset_name: ${{ github.ref }}.zip
          asset_content_type: application/gzip
